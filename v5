from tkinter import *
from tkinter import ttk
import random

# quit subroutine
def quit():
    main_window.destroy()

#generate a random receipt number between 1000000 and 9999999
def generate_receipt_number():
    while True:
        receipt_number = random.randint(1000000, 9999999)
        # Check if the receipt_number already exists in hire_details
        if not any(entry[3] == str(receipt_number) for entry in hire_details):
            entry_receipt.delete(0, END)
            entry_receipt.insert(0, receipt_number)
            break


#print details of the hired items
def PrintHireDetails():
    row_counter = 0
        # Clear all the labels before printing
    for widget in main_window.winfo_children():
        grid_info = widget.grid_info()
        if grid_info and grid_info['row'] >= 8:
            widget.grid_remove()
    #Create the column headings for the details
    #font for headings
    Label(main_window, font=("Helvetica 10 bold"),text="Row").grid(column=0,row=7)
    Label(main_window, font=("Helvetica 10 bold"),text="Full Name").grid(column=1,row=7)
    Label(main_window, font=("Helvetica 10 bold"),text="Item Hired").grid(column=2,row=7)
    Label(main_window, font=("Helvetica 10 bold"),text="No of Items Hired").grid(column=3,row=7)
    Label(main_window, font=("Helvetica 10 bold"),text="Receipt Number").grid(column=4,row=7)

    #add each item in the list into its own row
    while row_counter < counters['total_entries']:
        Label(main_window, text=row_counter).grid(column=0,row=row_counter+8) 
        Label(main_window, text=(hire_details[row_counter][0])).grid(column=1,row=row_counter+8)
        Label(main_window, text=(hire_details[row_counter][1])).grid(column=2,row=row_counter+8)
        Label(main_window, text=(hire_details[row_counter][2])).grid(column=3,row=row_counter+8)
        Label(main_window, text=(hire_details[row_counter][3])).grid(column=4, row=row_counter + 8)
        row_counter +=  1
        counters['row_counter'] = row_counter

#Check that inputs are valid
def check_inputs():
    input_check = 0
    Label(main_window, text="               ").grid(column=2,row=0)
    Label(main_window, text="               ").grid(column=2,row=1)
    Label(main_window, text="               ").grid(column=2,row=2)
    Label(main_window, text="               ").grid(column=2,row=3)
    #set error text if name is blank   
    if len(entry_name.get()) == 0:
        Label(main_window, fg="red", text="Required").grid(column=2,row=0)
        input_check = 1
    #set error text if Item hired is blank     
    if len(selected_item.get()) == 0:
        Label(main_window, fg="red", text="Required").grid(column=2,row=1)
        input_check = 1
    #set error text if number of items is blank and not between 1 and 500  
    if entry_hires.get().isdigit(): 
        if int(entry_hires.get()) < 1 or int(entry_hires.get()) > 500:
            Label(main_window, fg="red", text="1-500 only").grid(column=2,row=2)
            input_check = 1
    else:
        Label(main_window, fg="red", text="1-500 only").grid(column=2,row=2)
        input_check = 1

    if input_check == 0:
        append_name() 

# add the next item to the list
def append_name():
    # append each item to its own part of the list
    hire_details.append([entry_name.get(), selected_item.get(), entry_hires.get(), entry_receipt.get()])
    # clear the boxes
    entry_name.delete(0, 'end')
    entry_hires.delete(0, 'end')
    entry_receipt.delete(0, 'end')  # clear the receipt entry box as well
    counters['total_entries'] += 1

#delete a row from the list
def delete_row():
    #find row to delete and delete it
    del hire_details[int(delete_item.get())]
    counters['total_entries'] -= 1
    row_counter = counters['row_counter']
    delete_item.delete(0, 'end')
    #clear the last item displayed on the GUI
    Label(main_window, text="").grid(column=0, row=row_counter+7) 
    Label(main_window, text="").grid(column=1, row=row_counter+7)
    Label(main_window, text="").grid(column=2, row=row_counter+7)
    Label(main_window, text="").grid(column=3, row=row_counter+7)
    Label(main_window, text="").grid(column=4, row=row_counter+7)

    #print all the items in the list
    PrintHireDetails()

#create the buttons and labels
def setup_buttons():
    # Create all the labels and buttons with padding to make it neater
    #put them in the right grid position
    Label(main_window, text="Name").grid(column=0, row=0, sticky=E, pady=5)
    Label(main_window, text="Item").grid(column=0, row=1, sticky=E, pady=5)
    Label(main_window, text="No of Items").grid(column=0, row=2, sticky=E, pady=5)
    Label(main_window, text="Row #").grid(column=3, row=2, sticky=W, padx=10, pady=5)
    Label(main_window, text="Receipt Number").grid(column=0, row=3, sticky=E, pady=5)
    #adjust width to make button wide enough
    ttk.Button(main_window, text="Quit", command=quit, width=10).grid(column=4, row=0, sticky=E, pady=5)
    ttk.Button(main_window, text="Append Details", command=check_inputs).grid(column=4, row=2, pady=5)
    ttk.Button(main_window, text="Print Details", command=PrintHireDetails, width=15).grid(column=4, row=1, sticky=E, pady=5)
    ttk.Button(main_window, text="Delete Row", command=delete_row, width=10).grid(column=4, row=3, sticky=E, pady=5)
    ttk.Button(main_window, text="Receipt Number", command=generate_receipt_number, width=15).grid(column=2, row=3, sticky=E, pady=5)

    # Create entry box for receipt number with some padding to the right (padx)
    global entry_receipt
    entry_receipt = Entry(main_window)
    # Adjust the padx value 
    entry_receipt.grid(column=1, row=3, pady=5, padx=(0, 10))  
    # Dropdown menu for item hired
    items = ["balloons", "hats", "confetti", "sound system"]
    global selected_item
    selected_item = StringVar(main_window)
    dropdown_menu = ttk.Combobox(main_window, textvariable=selected_item, values=items, state="readonly")
    dropdown_menu.grid(column=1, row=1, pady=5)




#start the program running
def main():
#Set the background colour of the main window
    main_window.config(bg="#f5a767")  

    #Start the GUI up
    setup_buttons()
    main_window.mainloop()
    
#create empty list for hire details and empty variable for entries in the list
counters = {'total_entries': 0, 'row_counter': 0}
hire_details = []    
main_window = Tk()    
entry_name = Entry(main_window)
entry_name.grid(column=1, row=0)
entry_hires = Entry(main_window)
entry_hires.grid(column=1, row=2)
delete_item = Entry(main_window)
delete_item.grid(column=3, row=3)
main()
